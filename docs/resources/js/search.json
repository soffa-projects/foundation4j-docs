[[{"l":"Introduction","p":["Le projet Foundation est né de la volonté de fournir aux équipes de développement Java un outil permettant de construire simplement des solutions SaaS principalement mais par extension des microservices.","Notre objectif est d'embarquer dans cet outil les bonnes pratiques qu'il est difficile d'attendre de profils juniors dès leur intégration en entreprise. En effet, plusieurs entreprises recrutent un nombre important de jeunes diplômés et juniors. Même avec un encadrement de profils seniors, il est impossible d'attendre à ces profils de un certain niveau de qualité à court voire moyen terme.","Le dilemme c'est qu'en face, les clients attendent un produit de la plus haute qualité possible.","Notre réponse à ce situation est de fournir les briques nécessaires pour construire du logiciel de qualité, simple de prise en main par des juniors et ouvert en code source pour permettre aux développeurs de comprendre étape par étape le fonctionnement de la boîte magique.","Même des développeurs expérimentés apprécieront l'approche proposée."]},{"l":"Engagement","p":["Il est important pour nous d'exposer de façon explicite notre vision produit. Notre engagement, vis à vis de Foundation est donc le suivant:","Le code source de tout le framework est et sera toujours gratuit, hébergé sur Github, dans le domaine public","Toutes les librairies Java seront toujours publiées sur MavenCentral ( https://search.maven.org/)"]},{"l":"Projet Bantu","p":["Le terme doogfooding ou Eating your own dog food remonte à un mail interne chez Microsoft en 1988. Il s'agit d'une pratique qui consiste à utiliser ses propres produits afin de se confronter directement à ses qualités et défauts.","Pour garantir la qualité et l'expérience développeurs derrière Foundation, nous sommes aux premières lignes en utilisant toutes les briques Foundation dans un projet ambitieux Bantu.","Ce projet fournira à moyen terme des métriques très concrètes sur ce qu'il est possible de faire avec ce socle technique."]}],[{"l":"Choix structurants","p":["Pour construire Foundation, il fallait faire des choix structurants pour que chaque entreprise puisse décider très rapidement s'il y a un alignement avec sa stratégie interne.","Nous avons donc simplifié les choses et construit sur 4 choix structurants :"]},{"l":"Architecture hexagonale","p":["Ce premier choix était le plus simple à faire car nous considérons que l'architecture hexagonale est un solide pilier sur lequel une entreprise peut construire une stratégie logicielle long-terme.","L'objectif de cette architecture est de séparer, autant que faire se peut, le technique du fonctionnel en réduisant au maximum la dépendance vis à vis d'un framework technique.","Pour cette raison, nous classons Foundation dans la catégorie framework fonctionnel plutôt que technique car la priorité, comme on pourra le voir dans les sections suivantes, est donnée au domaine métier."]},{"l":"SpringBoot","p":["Nous faisons le choix de construire par dessus SpringBoot car c'est cetainement le framework Java le plus populaire en entreprise. Toutefois, l'objectif de Foundation est de masquer au mieux le technique. Même si c'est quelque chose que SpringBoot fait déjà très bien, nous souhaitons aller plus loin et offir une solution orientée \"fonctionnel\"."]},{"l":"Java 8","p":["Java8 est encore très populaire en entreprise et avoir un code compatible avec cette version est un important facteur pour l'adoption de l'outil."]},{"l":"Gradle","p":["Le 4e et dernier choix structurant, c'est Gradle, outil de build et gestion des dépendances retenu pour sa flexibilité principalement."]}],[{"l":"Bien démarrer","p":["Nous recommandons l'utilisation de Foundation si vous souhaitez construire un projet entreprise long terme (de taille moyenne ou grande) avec une importante dans la maintenabilité et la qualité.","Pour démarrer un projet avec Foundation4j, nous recommandons de télécharger le repository foundation-java-starter, puis suivre les 2 étapes suivantes:","Changer le nom du projet","Personnaliser le package, par défault à foundation.app","Voilà, vous pouvez commencer à travailler !"]},{"i":"anatomie-dun-projet","l":"Anatomie d'un projet","p":["Par défault, un projet créé avec le client foundation utilisera le template projet que nous recommandons. Ce template est un projet Gradle avec deux modules : api et service.","Anatomie d'un projet Foundation"]},{"l":"Module API","p":["Contient la description, avec un vocabulatire fonctionnel, de ce que l'application doit implémenter come usecases et ressources.","Dans les packages qui sont proposés, vous retrouvez:"]},{"i":"package-apischema","l":"Package api.schema","p":["Ce package contient le modèle de données (POJO) manipulés et produits par les usecases."]},{"i":"package-apiusecase","l":"Package api.usecase","p":["Ce package contient les interfaces décrivant les fonctionnalités du projet. Chaque usecase utilise un verbe en anglais pour clairement décrire la responsabilité.","En terme de bonnes pratiques, nous recommandons ce qui suit:","Un verbe commençant par Get indique qu'il s'agit d'une opération de lecture (Query)","Un verbe commençant par On indique qu'il s'git d'un événement (Event)","Tous les autres usecases sont considérés comme des opérations d'écriture (Command)","La définition d'un UseCase est une simple interface qui étend dev.soffa.foundation.core.UseCase. En ouvrant l'interface, on peut donc avoir une idée générale de que cette opération est censée faire, quel est l'input et quel est l'output.","Il est donc recommandé de toujours choisir une terminologie fonctionnelle simple à comprendre : Ubiquitous Language."]},{"i":"package-apiresources","l":"Package api.resources","p":["Ce package contient les interfaces des ressources que le projet expose (en REST, GraphQL, etc). Une ressource est une interface qui expose plusieurs opérations. Foundation inclut plusieurs dépendances par défaut, dont OpenAPI pour la documentation des APIs.","La méthode invoke déclarée dans l'inteface Resource permet au développeur de faire le mapping entre l'opération et le bone usecase.","Même si vous constatez des annotations SpringBoot à ce niveau, il ne s'agit que d'annotations. Les fichier correspodants ont été copier depuis le projet officiel Spring et coller dans foundation-api pour ne pas avoir à inclure toute la dépendance Spring dans ce module API. L'interprétation de ces interfaces n'est faite que dans la partie app-service."]},{"l":"Importance du module API","p":["Le module API permet de décrire le fonctionnement de votre service mais aussi de servir d'interface pour les clients. En effet, le module api pouvant être publié séparement dans un serveur nexus, peut être rajouté comme dépendance dans un autre service dans lequel le code suivant peut etre utilisé :","Il n'y a donc aucune génération de client à prévoir lorsque votre ressource doit être consommer depuis un code Java/Kotlin."]},{"l":"Module Core","p":["Contient l'implémentation des usecases(qui contiennent les règles de gestion). Cette implémentation peut nécessister l'accès à des ressources externes au système. L'interface de cette ressource externe est alors créée dans ce module et l'implémentation déléguée à la couche service"]},{"l":"Module Service","p":["Le module app-service contient l'implémentation de vos différents usecases à travers des handlers et autres classes support.","Foundation est construit sur SpringBoot. Toutefois, grâce à la fonctionnalit\" implementation de gradle, le développeur n'a pas accès aux différentes classes Spring. Ceci est fait par design pour encourager l'utilisateur de classes simplement définies ainsi que de classe telel que javax.inject.Named au lieu de @Component, @Service(...) de Spring."]},{"i":"plus-dexemples","l":"Plus d'exemples","p":["Le projet foundation-java-starter vous permet de disposer d'une structure basique pour démarrer rapidement. Nous vous invitons à consulter foundation4j-samples pour avoir plus d'exemples sur des cas d'usages plus avancés d'un simple Echo."]}],[{"l":"Introduction"}],[{"l":"Introduction"}],[{"l":"Introduction"}],[{"l":"Multitenancy"}],[{"l":"Introduction"}],[{"l":"Mail"}],[{"l":"Object storage"}],[{"l":"Pubsub"}],[{"l":"Tracing"}],[{"l":"Introduction"}],[{"l":"Introduction"}]]